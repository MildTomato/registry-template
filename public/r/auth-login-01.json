{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auth-login-01",
  "type": "registry:block",
  "title": "Auth Login 01",
  "description": "A login form with Supabase authentication.",
  "files": [
    {
      "path": "registry/auth-login-01/page.tsx",
      "content": "import { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { supabase } from \"@/app/framework-files/nextjs/app-router/utils/supabase/client\"\n\nexport function LoginForm({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<\"div\">) {\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [error, setError] = useState<string | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const router = useRouter()\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      const { error } = await supabase().auth.signInWithPassword({\n        email,\n        password,\n      })\n      if (error) throw error\n      router.push(\"/dashboard\") // Redirect to dashboard after successful login\n    } catch (error: unknown) {\n      setError(\n        error instanceof Error ? error.message : \"An unexpected error occurred\"\n      )\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleGoogleLogin = async () => {\n    try {\n      const { error } = await supabase().auth.signInWithOAuth({\n        provider: \"google\",\n      })\n      if (error) throw error\n    } catch (error: unknown) {\n      setError(\n        error instanceof Error ? error.message : \"An unexpected error occurred\"\n      )\n    }\n  }\n\n  return (\n    <div className={cn(\"flex flex-col gap-6\", className)} {...props}>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-2xl\">Login</CardTitle>\n          <CardDescription>\n            Enter your email below to login to your account\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleLogin}>\n            <div className=\"flex flex-col gap-6\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"m@example.com\"\n                  required\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <div className=\"flex items-center\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <a\n                    href=\"#\"\n                    className=\"ml-auto inline-block text-sm underline-offset-4 hover:underline\"\n                  >\n                    Forgot your password?\n                  </a>\n                </div>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  required\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                />\n              </div>\n              {error && <p className=\"text-sm text-red-500\">{error}</p>}\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? \"Logging in...\" : \"Login\"}\n              </Button>\n              <Button\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={handleGoogleLogin}\n                type=\"button\"\n              >\n                Login with Google\n              </Button>\n            </div>\n            <div className=\"mt-4 text-center text-sm\">\n              Don&apos;t have an account?{\" \"}\n              <a href=\"#\" className=\"underline underline-offset-4\">\n                Sign up\n              </a>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n",
      "type": "registry:page",
      "target": "app/login/page.tsx"
    },
    {
      "path": "registry/auth-login-01/actions/login.ts",
      "content": "\"use server\"\n\nimport { revalidatePath } from \"next/cache\"\nimport { redirect } from \"next/navigation\"\n\nimport { createClient } from \"@/app/framework-files/nextjs/app-router/utils/supabase/server\"\n\nexport async function login(formData: FormData) {\n  const supabase = await createClient()\n\n  // type-casting here for convenience\n  // in practice, you should validate your inputs\n  const data = {\n    email: formData.get(\"email\") as string,\n    password: formData.get(\"password\") as string,\n  }\n\n  const { error } = await supabase.auth.signInWithPassword(data)\n\n  if (error) {\n    redirect(\"/error\")\n  }\n\n  revalidatePath(\"/\", \"layout\")\n  redirect(\"/\")\n}\n\nexport async function signup(formData: FormData) {\n  const supabase = await createClient()\n\n  // type-casting here for convenience\n  // in practice, you should validate your inputs\n  const data = {\n    email: formData.get(\"email\") as string,\n    password: formData.get(\"password\") as string,\n  }\n\n  const { error } = await supabase.auth.signUp(data)\n\n  if (error) {\n    redirect(\"/error\")\n  }\n\n  revalidatePath(\"/\", \"layout\")\n  redirect(\"/\")\n}\n",
      "type": "registry:page",
      "target": "~/app/actions/login.ts"
    },
    {
      "path": "app/framework-files/nextjs/app-router/.env",
      "content": "SUPABASE_URL=\"ADD SUPABASE URL HERE\"\nSUPABASE_ANON_KEY=\"ADD SUPABASE ANON KEY HERE\"\n",
      "type": "registry:page",
      "target": "~/.env"
    },
    {
      "path": "app/framework-files/nextjs/app-router/utils/supabase/client.ts",
      "content": "import { createBrowserClient } from \"@supabase/ssr\"\n\nexport function supabase() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n}\n",
      "type": "registry:page",
      "target": "~/utils/supabase/client.ts"
    },
    {
      "path": "app/framework-files/nextjs/app-router/utils/supabase/server.ts",
      "content": "import { createServerClient } from \"@supabase/ssr\"\nimport { cookies } from \"next/headers\"\n\nexport async function createClient() {\n  const cookieStore = await cookies()\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  )\n}\n",
      "type": "registry:page",
      "target": "~/utils/supabase/server.ts"
    },
    {
      "path": "app/framework-files/nextjs/app-router/utils/supabase/middleware.ts",
      "content": "import { createServerClient } from \"@supabase/ssr\"\nimport { NextResponse, type NextRequest } from \"next/server\"\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value }) =>\n            request.cookies.set(name, value)\n          )\n          supabaseResponse = NextResponse.next({\n            request,\n          })\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options)\n          )\n        },\n      },\n    }\n  )\n\n  // Do not run code between createServerClient and\n  // supabase.auth.getUser(). A simple mistake could make it very hard to debug\n  // issues with users being randomly logged out.\n\n  // IMPORTANT: DO NOT REMOVE auth.getUser()\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (\n    !user &&\n    !request.nextUrl.pathname.startsWith(\"/login\") &&\n    !request.nextUrl.pathname.startsWith(\"/auth\")\n  ) {\n    // no user, potentially respond by redirecting the user to the login page\n    const url = request.nextUrl.clone()\n    url.pathname = \"/login\"\n    return NextResponse.redirect(url)\n  }\n\n  // IMPORTANT: You *must* return the supabaseResponse object as it is.\n  // If you're creating a new response object with NextResponse.next() make sure to:\n  // 1. Pass the request in it, like so:\n  //    const myNewResponse = NextResponse.next({ request })\n  // 2. Copy over the cookies, like so:\n  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())\n  // 3. Change the myNewResponse object to fit your needs, but avoid changing\n  //    the cookies!\n  // 4. Finally:\n  //    return myNewResponse\n  // If this is not done, you may be causing the browser and server to go out\n  // of sync and terminate the user's session prematurely!\n\n  return supabaseResponse\n}\n",
      "type": "registry:page",
      "target": "~/utils/supabase/middleware.ts"
    },
    {
      "path": "app/framework-files/nextjs/app-router/auth/confirm/route.ts",
      "content": "import { type EmailOtpType } from \"@supabase/supabase-js\"\nimport { type NextRequest } from \"next/server\"\n\nimport { createClient } from \"@/app/framework-files/nextjs/app-router/utils/supabase/server\"\nimport { redirect } from \"next/navigation\"\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url)\n  const token_hash = searchParams.get(\"token_hash\")\n  const type = searchParams.get(\"type\") as EmailOtpType | null\n  const next = searchParams.get(\"next\") ?? \"/\"\n\n  if (token_hash && type) {\n    const supabase = await createClient()\n\n    const { error } = await supabase.auth.verifyOtp({\n      type,\n      token_hash,\n    })\n    if (!error) {\n      // redirect user to specified redirect URL or root of app\n      redirect(next)\n    }\n  }\n\n  // redirect the user to an error page with some instructions\n  redirect(\"/error\")\n}\n",
      "type": "registry:page",
      "target": "~/auth/confirm/route.ts"
    },
    {
      "path": "app/framework-files/nextjs/app-router/middleware.ts",
      "content": "import { type NextRequest } from \"next/server\"\nimport { updateSession } from \"@/app/framework-files/nextjs/app-router/utils/supabase/middleware\"\n\nexport async function middleware(request: NextRequest) {\n  return await updateSession(request)\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * Feel free to modify this pattern to include more paths.\n     */\n    \"/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)\",\n  ],\n}\n",
      "type": "registry:page",
      "target": "~/auth/middleware.ts"
    }
  ]
}