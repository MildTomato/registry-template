{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auth-login-01",
  "type": "registry:block",
  "title": "Auth Login 01",
  "description": "A login form with Supabase authentication.",
  "files": [
    {
      "path": "registry/auth-login-01/page.tsx",
      "content": "import { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { supabase } from \"@/app/framework-files/nextjs/app-router/utils/supabase/client\"\n\nexport function LoginForm({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<\"div\">) {\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [error, setError] = useState<string | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const router = useRouter()\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      const { error } = await supabase().auth.signInWithPassword({\n        email,\n        password,\n      })\n      if (error) throw error\n      router.push(\"/dashboard\") // Redirect to dashboard after successful login\n    } catch (error: unknown) {\n      setError(\n        error instanceof Error ? error.message : \"An unexpected error occurred\"\n      )\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleGoogleLogin = async () => {\n    try {\n      const { error } = await supabase().auth.signInWithOAuth({\n        provider: \"google\",\n      })\n      if (error) throw error\n    } catch (error: unknown) {\n      setError(\n        error instanceof Error ? error.message : \"An unexpected error occurred\"\n      )\n    }\n  }\n\n  return (\n    <div className={cn(\"flex flex-col gap-6\", className)} {...props}>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-2xl\">Login</CardTitle>\n          <CardDescription>\n            Enter your email below to login to your account\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleLogin}>\n            <div className=\"flex flex-col gap-6\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"m@example.com\"\n                  required\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <div className=\"flex items-center\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <a\n                    href=\"#\"\n                    className=\"ml-auto inline-block text-sm underline-offset-4 hover:underline\"\n                  >\n                    Forgot your password?\n                  </a>\n                </div>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  required\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                />\n              </div>\n              {error && <p className=\"text-sm text-red-500\">{error}</p>}\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? \"Logging in...\" : \"Login\"}\n              </Button>\n              <Button\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={handleGoogleLogin}\n                type=\"button\"\n              >\n                Login with Google\n              </Button>\n            </div>\n            <div className=\"mt-4 text-center text-sm\">\n              Don&apos;t have an account?{\" \"}\n              <a href=\"#\" className=\"underline underline-offset-4\">\n                Sign up\n              </a>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n",
      "type": "registry:page",
      "target": "app/login/page.tsx"
    },
    {
      "path": "registry/auth-login-01/actions/login.ts",
      "content": "\"use server\"\n\nimport { revalidatePath } from \"next/cache\"\nimport { redirect } from \"next/navigation\"\n\nimport { createClient } from \"@/app/framework-files/nextjs/app-router/utils/supabase/server\"\n\nexport async function login(formData: FormData) {\n  const supabase = await createClient()\n\n  // type-casting here for convenience\n  // in practice, you should validate your inputs\n  const data = {\n    email: formData.get(\"email\") as string,\n    password: formData.get(\"password\") as string,\n  }\n\n  const { error } = await supabase.auth.signInWithPassword(data)\n\n  if (error) {\n    redirect(\"/error\")\n  }\n\n  revalidatePath(\"/\", \"layout\")\n  redirect(\"/\")\n}\n\nexport async function signup(formData: FormData) {\n  const supabase = await createClient()\n\n  // type-casting here for convenience\n  // in practice, you should validate your inputs\n  const data = {\n    email: formData.get(\"email\") as string,\n    password: formData.get(\"password\") as string,\n  }\n\n  const { error } = await supabase.auth.signUp(data)\n\n  if (error) {\n    redirect(\"/error\")\n  }\n\n  revalidatePath(\"/\", \"layout\")\n  redirect(\"/\")\n}\n",
      "type": "registry:component"
    }
  ]
}